#!/bin/bash

#
# Electrode kernel computation
# Author: Daniele Linaro, April 2012
#

print_help()
{
    echo
    echo "Electrode kernel computation"
    echo
    echo "Usage : `basename $0` [options <value>]"
    echo
    echo "where options are:"
    echo
    echo "   -h   display this help message and exit"
    echo "   -d   specify the duration of the white noise stimulation in seconds (default 10)"
    echo "   -I   specify the input channel (default 0)"
    echo "   -O   specify the output channel (default 0)"
    echo "   -F   specify the sampling frequency (default 20000)"
    echo "   -a   append channel numbers to the kernel.dat file (default no)"
    echo
}

append_channel="no"
duration=10
ai=0
ao=0
F=20000
while getopts ":d:I:O:F:ah" opt ; do
    case $opt in
	F)
	    F=$OPTARG
	    ;;
	d)
	    duration=$OPTARG
	    ;;
	I)
	    ai=$OPTARG
	    ;;
	O)
	    ao=$OPTARG
	    ;;
	a)
	    append_channel="yes"
	    ;;
	h)
	    print_help
	    exit 0
	    ;;
	\?)
	    echo "Invalid option: -$OPTARG."
	    echo "Type `basename $0` -h for help."
	    exit 1
	    ;;
    esac
done

if [ -z "${PROTOCOLS_PATH:-}" ] ; then
    origstimfile=$HOME/protocols/white_noise/white_noise_short.stim
else
    origstimfile=$PROTOCOLS_PATH/white_noise/white_noise_short.stim
fi

cclamprc_write -e -i -c $ai
cclamprc_write -o -c $ao

stimfile=/tmp/white_noise.stim

sed -e 's/^10/'$duration'/' $origstimfile > $stimfile
cclamp -f $stimfile -F $F
datafile=`ls -lrth | tail -1 | awk '{ print $9 }'`
extract_kernels.py $datafile
kernelfile=${datafile%.h5}_kernel.dat
rm -f kernel.dat
if [ $append_channel == "no" ] ; then
    ln -s $kernelfile kernel.dat
else
    ln -s $kernelfile kernel-$ai-$ao.dat
fi
rm $stimfile
